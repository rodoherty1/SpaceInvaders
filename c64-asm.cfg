FEATURES {
    STARTADDRESS: default = $0801;
}
SYMBOLS {
    __LOADADDR__: type = import;
}
MEMORY {
    ZP:       file = "", start = $0002,  size = $00FE,      define = yes;
    LOADADDR: file = %O, start = %S - 2, size = $0002;
    MAIN:     file = %O, start = %S,     size = $D000 - %S;
}
SEGMENTS {
    ZEROPAGE: load = ZP,       type = zp,  optional = yes;
    LOADADDR: load = LOADADDR, type = ro;
    EXEHDR:   load = MAIN,     type = ro,  optional = yes;
    CODE:     load = MAIN,     type = rw;
    RODATA:   load = MAIN,     type = ro,  optional = yes;
    DATA:     load = MAIN,     type = rw,  optional = yes;
    BSS:      load = MAIN,     type = bss, optional = yes, define = yes;
}

#
#  kawalski Simulator
#
# MEMORY {
# 	HEADER:  start = $0000, size = $0004, file = %O;
# 	ZP:      start = $0000, size = $00D0, type = rw, define = yes;
# 	RAM:     start = $0400, size = $3A00, file = %O, define = yes;
# }
# SEGMENTS {
# 	EXEHDR:   load = HEADER,          type = ro;
# 	STARTUP:  load = RAM, type = ro;
# 	LOWCODE:  load = RAM, type = ro,               optional = yes;
# 	INIT:     load = RAM, type = ro, define = yes, optional = yes;
# 	CODE:     load = RAM, type = ro;
# 	RODATA:   load = RAM, type = ro;
# 	DATA:     load = RAM, type = rw;
# 	BSS:      load = RAM, type = bss, define = yes;
# 	HEAP:     load = RAM, type = bss, optional = yes; # must sit just below stack
# 	ZEROPAGE: load = ZP,  type = zp;
# }
# FEATURES {
# 	CONDES: segment = INIT,
# 		type = constructor,
# 		label = __CONSTRUCTOR_TABLE__,
# 		count = __CONSTRUCTOR_COUNT__;
# 	CONDES: segment = RODATA,
# 		type = destructor,
# 		label = __DESTRUCTOR_TABLE__,
# 		count = __DESTRUCTOR_COUNT__;
# 	CONDES: type = interruptor,
# 		segment = RODATA,
# 		label = __INTERRUPTOR_TABLE__,
# 		 count = __INTERRUPTOR_COUNT__;
# }
# SYMBOLS {
# 	__STACKSIZE__ = $800;	# 2K stack
# }
